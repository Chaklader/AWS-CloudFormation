Description: >
    Chaklader A. Arefe / Udagram Project
    This template deploys server for the already created network for udagram project

# Need to correct AMI for all regions except the us-east-1
Mappings:
    #  This is the Amazon Linux 2 AMI.  Adjust these values as needed, they can change a few times per year:
    AmazonLinuxAMI:
        us-east-1:
            AMI: ami-0a4f4704a9146742a # N Virginia
        us-east-2:
            AMI: ami-0cf31d971a3ca20d6 # Ohio
        us-west-1:
            AMI: ami-0782017a917e973e7 # N California
        us-west-2:
            AMI: ami-6cd6f714 # Oregon
        eu-west-1:
            AMI: ami-0bdb1d6c15a40392c # Ireland
        eu-central-1:
            AMI: ami-0f5dbc86dd9cbf7a8 # Frankfurt
        sa-east-1:
            AMI: ami-0ad7b0031d41ed4b9 # Sao Paulo
        ap-southeast-1:
            AMI: ami-01da99628f381e50a # Singaport
        ap-southeast-2:
            AMI: ami-00e17d1165b9dd3ec # Sydney
        ap-northeast-1:
            AMI: ami-08847abae18baa040 # Tokyo

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String

    InstanceType:
        Description: "The EC2 instance type of general purpose"
        Type: String
        AllowedValues:
            [
                t2.medium,
                t3.small,
                t3.nano,
                t3.micro,
                t3.small,
                t3.medium,
                t3.large,
                t3.xlarge,
                t3.2xlarge,
            ]
        Default: t3.medium

    myKeyPair:
        Description: Amazon EC2 Key Pair
        Type: "AWS::EC2::KeyPair::KeyName"
        Default: CLI

Resources:
    UdacityS3ReadOnlyEC2:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${EnvironmentName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: "/"

    RolePolicies:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: AmazonS3ReadOnlyAccess
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Action:
                          - s3:Get*
                          - s3:List*
                      Resource:
                          - arn:aws:s3:::udacity-demo-1
                          - arn:aws:s3:::udacity-demo-1/*
            Roles:
                - Ref: UdacityS3ReadOnlyEC2

    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
                - Ref: UdacityS3ReadOnlyEC2

    LoadBalancerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http traffic to and from load balancer
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http and ssh to the web server
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 103.150.26.254/32 # My IP address
            SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0

    # Need two vCPUs and at least 4GB of RAM. The Operating System to be used is Ubuntu 18. So, choose an Instance size and Machine
    # Image (AMI) that best fits this spec. Be sure to allocate at least 10GB of disk space so that you don't run into issues.

    # Uubuntu image locator: https://cloud-images.ubuntu.com/locator/
    # Please, provide the correct KeyName in the launch configuration

    #  The UserData script for Ubuntu Linux that will Install Apache Web Server, Start it, and
    #  create an index.html that will be displayed when you visit the IP address of this server
    #  with your web browser
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    echo "Udacity Demo Web Server Up and Running!" > index.html
                    aws s3 cp s3://udacity-demo-1/udacity.zip .
                    unzip -o udacity.zip
            # ImageId: ami-0a4f4704a9146742a
            ImageId: !FindInMap [AmazonLinuxAMI, !Ref "AWS::Region", AMI] # We lookup the AMI from the Region Map
            # KeyName: CLI
            IamInstanceProfile: !Ref ProfileWithRolesForOurApp
            SecurityGroups:
                - Ref: WebServerSecGroup
            InstanceType: !Ref "InstanceType"
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                      VolumeSize: "10" #10GB

    # myWebAppLaunchTemplate:
    #     Type: AWS::EC2::LaunchTemplate
    #     Properties: 
    #         LaunchTemplateData:
    #             UserData:
    #                 Fn::Base64: !Sub |
    #                     #!/bin/bash
    #                     apt-get update -y
    #                     apt-get install unzip awscli -y
    #                     apt-get install apache2 -y
    #                     systemctl start apache2.service
    #                     cd /var/www/html
    #                     echo "Udacity Demo Web Server Up and Running!" > index.html
    #                     aws s3 cp s3://udacity-demo-1/udacity.zip .
    #                     unzip -o udacity.zip
    #             ImageId: !FindInMap [AmazonLinuxAMI, !Ref "AWS::Region", AMI] # We lookup the AMI from the Region Map
    #             KeyName: VocareumKey2
    #             SecurityGroupIds:
    #                 - sg-020ac9d8f54335c66
    #             InstanceType: !Ref "InstanceType"
    #             BlockDeviceMappings:
    #                 - DeviceName: "/dev/sdk"
    #                 Ebs:
    #                     VolumeSize: "10" #10GB

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

    # Need 4 servers, 2 located in each of your private subnets. The launch configuration will be used by an auto-scaling group.
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"

            # VpcId:
            #     Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"    
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: "4"
            MaxSize: "6"
            TargetGroupARNs:
                - Ref: WebAppTargetGroup

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            SecurityGroups:
                - Ref: LoadBalancerSecGroup
            Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                      Ref: WebAppTargetGroup
            LoadBalancerArn:
                Ref: WebAppLB
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref "WebAppTargetGroup"
            Conditions:
                - Field: path-pattern
                  Values: [/]
            ListenerArn: !Ref "Listener"
            Priority: 1

Outputs:
    WebAppLoadBalancerDNSName:
        Description: DNS name or Public URL of the Load Balancer
        Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName
## Extra

# If you want to go the extra mile, set up a bastion host (jump box) to allow you to SSH into
# your private subnet servers. This bastion host would be on a Public Subnet with port 22 open
# only to your home IP address, and it would need to have the private key that you use to access
# the other servers.
